#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import print_function, with_statement

import os
import sys
from pytinyhdfs.WebHDFS import WebHDFS
from pytinyhdfs.GZipUtil import GZipUtil

VERSION = "1.0.0"


def _command_ls(webhdfs, target_path):
    status, reason, files = webhdfs.listdir(target_path)
    if status != 200:
        raise Exception("List failed: [%d, %s]" % (status, reason))
    print('Found {} items'.format(len(files)))
    for row in files:
        print('{:10s} {:12s} {:12s} {:12s} {}'.format(
            row['permission'],
            row['owner'],
            row['group'],
            row['size'],
            row['name']
        ))


def command_ls(webhdfs, target_path):
    try:
        _command_ls(webhdfs, target_path)
    except Exception as e:
        print(e)


def _command_get(webhdfs, target_file, local_path):
    _, filename = os.path.split(target_file)
    local_file = os.path.join(local_path, filename)
    status, reason = webhdfs.getFile(target_file, local_file)
    if status != 200:
        raise Exception("Get failed: [%d, %s]" % (status, reason))


def command_get(webhdfs, target_file, local_path):
    try:
        _command_get(webhdfs, target_file, local_path)
    except Exception as e:
        print(e)


def _command_put(webhdfs, source_file, target_path, options):
    compressed_file = None
    source_filename = os.path.split(source_file)[1]
    try:
        upload_file = source_file
        target_file = target_path.rstrip("/") + "/" + source_filename
        if options.gzip and not upload_file.endswith('.gz'):
            successed, compressed_file = GZipUtil.compress(upload_file)
            if successed:
                upload_file = compressed_file
                target_file = target_file + ".gz"

        status, reason = webhdfs.putFile(
            upload_file, target_file, replication=options.replication
        )
        if status >= 200 and status < 400:
            if options.delete_source:
                os.remove(source_file)
        else:
            raise Exception("Put failed: [%d, %s]" % (status, reason))
        print("File: <%s>, Successed" % (source_file))
    except Exception as e:
        raise Exception("File: <%s>, Exception: %s" %
                        (source_file, "{0}".format(e)))
    finally:
        if compressed_file:
            os.remove(compressed_file)
            compressed_file = None


def command_put(webhdfs, source_file, target_path, options):
    try:
        _command_put(webhdfs, source_file, target_path, options)
    except Exception as e:
        print(e)

################################################
import re
from optparse import *


def die(message=None):
    if message and len(message) > 0:
        print(message)
        sys.exit(0)


def enforce_args(args, size):
    if len(args) != size:
        parser.print_help()
        die()
    return len(args)


def enforce_args2(args, size1, size2):
    if len(args) != size1 and len(args) != size2:
        parser.print_help()
        die()
    return len(args)


def parse_hdfs_path(path):
    if not path.startswith("hdfs:///"):
        die("HDFS path must start with \"hdfs:///\"")
    return path[7:]


if __name__ == '__main__':
    parser = OptionParser("%prog [options] <command>", version=VERSION)
    parser.add_option("-H", "--host",
                      dest="host",
                      help="The server address for HDFS")
    parser.add_option("-p", "--port",
                      type="int", dest="port",
                      default=50070,
                      help="The server port for HDFS, default: 50070")
    parser.add_option("-U", "--user",
                      dest="user",
                      default="root",
                      help="The username for HDFS, default: root")

    group = OptionGroup(parser, "ls <hdfs-path>",
                        "List information about directory")
    parser.add_option_group(group)

    group = OptionGroup(parser, "get <hdfs-file> [local-path]",
                        "Download HDFS file to local")
    parser.add_option_group(group)

    group = OptionGroup(parser, "put <file> <hdfs-path>",
                        "Upload file to HDFS")
    group.add_option("-R", "--replication",
                     type="int", dest="replication",
                     default=2,
                     help="The replication for upload, default: 2")
    group.add_option("-G", "--gzip",
                     action="store_true", dest="gzip",
                     default=False,
                     help="Try GZip compress before upload, file name append \".gz\"")
    group.add_option("-D", "--delete-source",
                     action="store_true", dest="delete_source",
                     default=False,
                     help="Delete input file when upload success")
    parser.add_option_group(group)

    if len(sys.argv) > 1:
        sys_argv = sys.argv
    else:
        sys_argv = [sys.argv[0], "--help"]

    (options, args) = parser.parse_args(sys_argv)
    if not options.host:
        die("lost options: -H or --host")

    args = args[1:]
    webhdfs = WebHDFS(options.host, options.port, options.user, timeout=10)

    if args[0] == "ls":
        enforce_args(args, 2)
        command_ls(webhdfs, parse_hdfs_path(args[1]))

    elif args[0] == "get":
        if enforce_args2(args, 3, 2) == 3:
            command_get(webhdfs, parse_hdfs_path(args[1]), args[2])
        else:
            command_get(webhdfs, parse_hdfs_path(args[1]), os.getcwd())

    elif args[0] == "put":
        enforce_args(args, 3)
        command_put(webhdfs, args[1], parse_hdfs_path(args[2]), options)
